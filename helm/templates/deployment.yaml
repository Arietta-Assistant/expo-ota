apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "expo-open-ota.fullname" . }}
  labels:
    {{- include "expo-open-ota.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "expo-open-ota.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "expo-open-ota.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "expo-open-ota.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: GIN_MODE
              value: "release"
            {{- if eq (index .Values.podAnnotations "prometheus.io/scrape") "true" }}
            - name: PROMETHEUS_ENABLED
              value: "true"
            {{- else }}
            - name: PROMETHEUS_ENABLED
              value: "false"
            {{- end }}
            {{- range $env := .Values.environment }}
              {{- $isRequired := true }}
              {{- if eq (typeOf $env.required) "bool" }}
                {{- $isRequired = $env.required }}
              {{- else if hasKey $env "required" }}
                {{- range $condition := $env.required }}
                  {{- $keyValue := index $.Values $condition.key }}
                  {{- if or (not $keyValue) (ne $keyValue $condition.is) }}
                    {{- $isRequired = false }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if $isRequired }}
                {{- if $env.computed }}
            - name: {{ $env.name }}
              value: "{{ index $.Values $env.key }}"
                {{- else if $.Values.secretName }}
            - name: {{ $env.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.secretName }}
                  key: {{ $env.name }}
                {{- else }}
            - name: {{ $env.name }}
              value: "{{ $env.value }}"
                {{- end }}
              {{- end }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
